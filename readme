Условие задачи:

Вы имеете отсортированный массив, в котором некоторые элементы могут отсутствовать, но остальные элементы по-прежнему отсортированы. Например, массив может выглядеть следующим образом:

[1, 2, None, None, 5, 6, 7, None, 10, 11]

Где None представляет собой пропущенные элементы. Ваша задача — найти индекс заданного элемента в таком массиве, используя бинарный поиск. Если элемент отсутствует, возвращайте -1.

Подсказки:

Обработка пропущенных элементов: Во время бинарного поиска, если середина массива содержит None, пропускайте её и переопределите границы поиска в зависимости от того, в каком направлении можно найти элемент.

Избегайте ненужных проверок: Поскольку массив отсортирован, вы можете избежать полной проверки всех элементов, если текущий элемент равен None.

Бинарный поиск с пропуском: Подумайте о том, как можно адаптировать бинарный поиск, чтобы учесть пропущенные элементы и все еще эффективно искать нужный элемент.

Пример результата:

arr = [1, 2, None, None, 5, 6, 7, None, 10, 11]

x = 7

print(search_in_sparse_array(arr, x))  # Ожидаемый результат: 6

x = 3

print(search_in_sparse_array(arr, x))  # Ожидаемый результат: -1

x = 10

print(search_in_sparse_array(arr, x))  # Ожидаемый результат: 8



ВАЖНО:

Ваша функция должна корректно обрабатывать пропущенные элементы и находить индекс заданного элемента.

Функция должна работать эффективно для больших массивов с пропущенными элементами, поддерживая сложность бинарного поиска, то есть O(log n) в среднем
